const images = document.querySelectorAll('img');
const avatar = document.querySelector('.avatar');
const socialIcons = document.querySelectorAll('.social-icon');


function pxToRem(px) {
    return px / 16 + 'rem';
}


AOS.init({
    duration: 200,
    once: true
    
}); 

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ç—Ä—è—Å–∫–∏
function simulateShake() {
    const event = {
        accelerationIncludingGravity: {
            x: Math.random() * 500 - 1, // —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏
            y: Math.random() * 500 - 1,
            z: 0 // z –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ 0
        }
    };

    handleDeviceMotion(event); // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–∫ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–π —Ç—Ä—è—Å–∫–µ
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (60000 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥)
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
function updateData() {
    const lastUpdateElement = document.getElementById("last-update");
    const lastDeploymentElement = document.getElementById("last-deployment");
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞
    fetch("https://api.github.com/repos/Cotoburger/Cotoburger.github.io")
        .then(response => {
            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ HTTP! –°—Ç–∞—Ç—É—Å: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            const date = new Date(data.pushed_at);
            const formattedDate = date.toLocaleDateString("ru-RU");
            const formattedTime = date.toLocaleTimeString("ru-RU");
            
            if (lastUpdateElement) {
                lastUpdateElement.textContent = `üì§Last Commit: ${formattedDate} ${formattedTime}`;
            }
        })
        .catch(error => {
            console.error("Commit fetch failure:", error);
            if (lastUpdateElement) {
                lastUpdateElement.textContent = "‚ùå Commit fetch failure";
            }
        });
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –¥–µ–ø–ª–æ–µ
    fetch("https://api.github.com/repos/Cotoburger/Cotoburger.github.io/deployments", {
        headers: { "Accept": "application/vnd.github.v3+json" }
    })
        .then(response => {
            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ HTTP! –°—Ç–∞—Ç—É—Å: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            if (data.length === 0) {
                throw new Error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–ø–ª–æ–µ–≤");
            }
            const latestDeployment = data[0]; // –ë–µ—Ä—ë–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π –¥–µ–ø–ª–æ–π
            const date = new Date(latestDeployment.created_at);
            const formattedDate = date.toLocaleDateString("ru-RU");
            const formattedTime = date.toLocaleTimeString("ru-RU");
            
            return fetch(latestDeployment.statuses_url, {
                headers: { "Accept": "application/vnd.github.v3+json" }
            }).then(statusResponse => {
                if (!statusResponse.ok) {
                    throw new Error(`–û—à–∏–±–∫–∞ HTTP! –°—Ç–∞—Ç—É—Å: ${statusResponse.status}`);
                }
                return statusResponse.json();
            }).then(statuses => {
                const latestStatus = statuses[0] || { state: "unknown" };
                const statusText = latestStatus.state === "success" ? "‚úÖ" :
                    latestStatus.state === "failure" ? "‚ùå ERROR" : "‚è≥ Deploy";
                
                if (lastDeploymentElement) {
                    lastDeploymentElement.textContent = `üì¶Last Deployment: ${formattedDate} ${formattedTime} (${statusText})`;
                }
            });
        })
        .catch(error => {
            console.error("Deployment fetch failure:", error);
            if (lastDeploymentElement) {
                lastDeploymentElement.textContent = "‚ùå Deployment fetch failure";
            }
        });
}

// –í—ã–∑–æ–≤–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
updateData();

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (60000 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥)
setInterval(updateData, 60000);