const images = document.querySelectorAll('img');
const avatar = document.querySelector('.avatar');
const socialIcons = document.querySelectorAll('.social-icon');


function pxToRem(px) {
    return px / 16 + 'rem';
}


AOS.init({
    duration: 200,
    once: true
    
}); 

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ç—Ä—è—Å–∫–∏
function simulateShake() {
    const event = {
        accelerationIncludingGravity: {
            x: Math.random() * 500 - 1, // —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏
            y: Math.random() * 500 - 1,
            z: 0 // z –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ 0
        }
    };

    handleDeviceMotion(event); // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–∫ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–π —Ç—Ä—è—Å–∫–µ
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (60000 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥)
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
function updateData() {
    const lastUpdateElement = document.getElementById("last-update");
    const lastDeploymentElement = document.getElementById("last-deployment");
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞
    fetch("https://api.github.com/repos/Cotoburger/Cotoburger.github.io")
        .then(response => {
            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ HTTP! –°—Ç–∞—Ç—É—Å: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            const date = new Date(data.pushed_at);
            const formattedDate = date.toLocaleDateString("ru-RU");
            const formattedTime = date.toLocaleTimeString("ru-RU");
            
            if (lastUpdateElement) {
                lastUpdateElement.textContent = `üì§Last Commit: ${formattedDate} ${formattedTime}`;
            }
        })
        .catch(error => {
            console.error("Commit fetch failure:", error);
            if (lastUpdateElement) {
                lastUpdateElement.textContent = "‚ùå Commit fetch failure";
            }
        });
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –¥–µ–ø–ª–æ–µ
    fetch("https://api.github.com/repos/Cotoburger/Cotoburger.github.io/deployments", {
        headers: { "Accept": "application/vnd.github.v3+json" }
    })
        .then(response => {
            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ HTTP! –°—Ç–∞—Ç—É—Å: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            if (data.length === 0) {
                throw new Error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–ø–ª–æ–µ–≤");
            }
            const latestDeployment = data[0]; // –ë–µ—Ä—ë–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π –¥–µ–ø–ª–æ–π
            const date = new Date(latestDeployment.created_at);
            const formattedDate = date.toLocaleDateString("ru-RU");
            const formattedTime = date.toLocaleTimeString("ru-RU");
            
            return fetch(latestDeployment.statuses_url, {
                headers: { "Accept": "application/vnd.github.v3+json" }
            }).then(statusResponse => {
                if (!statusResponse.ok) {
                    throw new Error(`–û—à–∏–±–∫–∞ HTTP! –°—Ç–∞—Ç—É—Å: ${statusResponse.status}`);
                }
                return statusResponse.json();
            }).then(statuses => {
                const latestStatus = statuses[0] || { state: "unknown" };
                const statusText = latestStatus.state === "success" ? "‚úÖ" :
                    latestStatus.state === "failure" ? "‚ùå ERROR" : "‚è≥ Deploy";
                
                if (lastDeploymentElement) {
                    lastDeploymentElement.textContent = `üì¶Last Deployment: ${formattedDate} ${formattedTime} (${statusText})`;
                }
            });
        })
        .catch(error => {
            console.error("Deployment fetch failure:", error);
            if (lastDeploymentElement) {
                lastDeploymentElement.textContent = "‚ùå Deployment fetch failure";
            }
        });
}

// –í—ã–∑–æ–≤–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
updateData();

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (60000 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥)
setInterval(updateData, 60000);


document.addEventListener("DOMContentLoaded", async function () {
    function updateInfo(id, text) {
        let elem = document.getElementById(id);
        if (elem) elem.textContent = text;
    }

    function logErrorToPage(message) {
        let errorElem = document.getElementById("error-log");
        if (errorElem) {
            let newError = document.createElement("p");
            newError.textContent = message;
            errorElem.appendChild(newError);
        }
    }

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç –æ—à–∏–±–æ–∫
    window.onerror = function (message, source, lineno, colno, error) {
        let errorText = `‚ùå –û—à–∏–±–∫–∞: ${message}`;
        if (source) errorText += `\nüìç –§–∞–π–ª: ${source}`;
        if (lineno && colno) errorText += ` (—Å—Ç—Ä–æ–∫–∞ ${lineno}, –∫–æ–ª–æ–Ω–∫–∞ ${colno})`;
        if (error && error.stack) errorText += `\nüõ† –°—Ç–µ–∫:\n${error.stack}`;

        logErrorToPage(errorText);
    };

    console.error = function (...args) {
        logErrorToPage("‚ùå –û—à–∏–±–∫–∞: " + args.join(" "));
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–±—Ä–∞—Ü–∏–∏
    if ("vibrate" in navigator) {
        updateInfo("vibration-status", "‚úÖ API –í–∏–±—Ä–∞—Ü–∏—è");
    } else {
        updateInfo("vibration-status", "‚ùå API –í–∏–±—Ä–∞—Ü–∏—è");
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä–∞
    if (window.DeviceMotionEvent) {
        updateInfo("accelerometer-status", "‚úÖ API –ê–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä");
        window.addEventListener('devicemotion', function(event) {
            let acceleration = event.acceleration;
            let accelData = `
                x: ${acceleration.x ? acceleration.x.toFixed(2) : 'N/A'} m/s¬≤,
                y: ${acceleration.y ? acceleration.y.toFixed(2) : 'N/A'} m/s¬≤,
                z: ${acceleration.z ? acceleration.z.toFixed(2) : 'N/A'} m/s¬≤
            `;
            updateInfo("accelerometer-data", accelData);
        });
    } else {
        updateInfo("accelerometer-status", "‚ùå API –ê–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä");
        updateInfo("accelerometer-data", "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö API –ê–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä–∞");
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏—Ä–æ—Å–∫–æ–ø–∞
    if (window.DeviceOrientationEvent) {
        updateInfo("gyroscope-status", "‚úÖ API –ì–∏—Ä–æ—Å–∫–æ–ø");
        window.addEventListener('deviceorientation', function(event) {
            let gyroData = `
                alpha: ${event.alpha ? event.alpha.toFixed(2) : 'N/A'}¬∞,
                beta: ${event.beta ? event.beta.toFixed(2) : 'N/A'}¬∞,
                gamma: ${event.gamma ? event.gamma.toFixed(2) : 'N/A'}¬∞
            `;
            updateInfo("gyroscope-data", gyroData);
        });
    } else {
        updateInfo("gyroscope-status", "‚ùå API –ì–∏—Ä–æ—Å–∫–æ–ø");
        updateInfo("gyroscope-data", "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö API –ì–∏—Ä–æ—Å–∫–æ–ø–∞");
    }
    

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    if (navigator.permissions) {
        try {
            // –ê–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä
            let accelPermission = await navigator.permissions.query({ name: "accelerometer" }).catch(() => null);
            if (accelPermission) {
                updateInfo("accelerometer-permission", `–ê–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä: ${accelPermission.state}`);
            } else {
                updateInfo("accelerometer-permission", "–ê–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä: ???");
            }

            // –ì–∏—Ä–æ—Å–∫–æ–ø
            let gyroPermission = await navigator.permissions.query({ name: "gyroscope" }).catch(() => null);
            if (gyroPermission) {
                updateInfo("gyroscope-permission", `–ì–∏—Ä–æ—Å–∫–æ–ø: ${gyroPermission.state}`);
            } else {
                updateInfo("gyroscope-permission", "–ì–∏—Ä–æ—Å–∫–æ–ø: ???");
            }

            // –í–∏–±—Ä–∞—Ü–∏—è (–æ–±—ã—á–Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è)
            let vibPermission = await navigator.permissions.query({ name: "vibration" }).catch(() => null);
            if (vibPermission) {
                updateInfo("vibration-permission", `–í–∏–±—Ä–∞—Ü–∏—è: ${vibPermission.state}`);
            } else {
                updateInfo("vibration-permission", "–í–∏–±—Ä–∞—Ü–∏—è: ???");
            }
        } catch (e) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:", e);
        }
    } else {
        updateInfo("vibration-permission", "‚ùå API —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");
        updateInfo("gyroscope-permission", "‚ùå API —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");
        updateInfo("accelerometer-permission", "‚ùå API —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");
    }
});

function logErrorToPage(message) {
    let errorElem = document.getElementById("error-log");
    if (errorElem) {
        let newError = document.createElement("p");
        newError.textContent = message;
        errorElem.appendChild(newError);
    }
}

// –ü–µ—Ä–µ—Ö–≤–∞—Ç console.error –∏ console.warn
let originalConsoleError = console.error;
let originalConsoleWarn = console.warn;

console.error = function (...args) {
    originalConsoleError.apply(console, args);
    logErrorToPage("‚ùå –û—à–∏–±–∫–∞: " + args.join(" "));
};

console.warn = function (...args) {
    originalConsoleWarn.apply(console, args);
    logErrorToPage("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: " + args.join(" "));
};

// –ü–µ—Ä–µ—Ö–≤–∞—Ç window.onerror (–æ—à–∏–±–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
window.onerror = function (message, source, lineno, colno, error) {
    let errorText = `‚ùå –û—à–∏–±–∫–∞: ${message}`;
    if (source) errorText += `\nüìç –§–∞–π–ª: ${source}`;
    if (lineno && colno) errorText += ` (—Å—Ç—Ä–æ–∫–∞ ${lineno}, –∫–æ–ª–æ–Ω–∫–∞ ${colno})`;
    if (error && error.stack) errorText += `\nüõ† –°—Ç–µ–∫:\n${error.stack}`;
    
    logErrorToPage(errorText);
};
