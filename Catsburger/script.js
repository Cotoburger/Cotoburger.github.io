// –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ –∞–≤–∞—Ç–∞—Ä–∫—É, –∞ —Ç–∞–∫–∂–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ü—Å–µ—Ç–µ–π
const images = document.querySelectorAll('img');
const avatar = document.querySelector('.avatar');
const socialIcons = document.querySelectorAll('.social-icon'); // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ü—Å–µ—Ç–µ–π

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Swiper
const swiper = new Swiper('.swiper-container', {
    spaceBetween: 20,
    slidesPerView: 'auto',
    loop: true,
    autoplay: {
        delay: 3500,
        disableOnInteraction: false,
    },
    navigation: {
        nextEl: '.swiper-button-next',
        prevEl: '.swiper-button-prev',
    },
    pagination: {
        el: '.swiper-pagination',
        clickable: true,
    },
});
let scrollTimeout;
window.addEventListener('scroll', () => {
    if (scrollTimeout) {
        cancelAnimationFrame(scrollTimeout);
    }
    scrollTimeout = requestAnimationFrame(() => {
        const h1h2Elements = document.querySelectorAll('h1, h2'); // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ h1 –∏ h2
        const avtextElement = document.querySelector('.avtext'); // –í–∞—à –Ω–∏–∫–Ω–µ–π–º

        if (scrollY > 400) {
            // –¢—ë–º–Ω–∞—è —Ç–µ–º–∞
            document.body.style.backgroundColor = '#02090e'; // –°–ê–ú–û–ï –í–ê–ñ–ù–û–ï
            document.body.style.color = '#4f99c1'; // –¶–í–ï–¢ –¢–ï–ö–°–¢–ê

            images.forEach((img) => {
                if (img !== avatar && !socialIcons.includes(img)) { // –ò—Å–∫–ª—é—á–∞–µ–º –∏–∫–æ–Ω–∫–∏ —Å–æ—Ü—Å–µ—Ç–µ–π
                    img.style.opacity = '0'; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ü—Å–µ—Ç–µ–π
                }
            });

            // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –¥–ª—è h1, h2 –∏ –Ω–∏–∫–Ω–µ–π–º–∞
            h1h2Elements.forEach((el) => {
                el.style.color = '#1a4b8e'; // –¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ —Ç–µ–º–Ω–æ–π —Ç–µ–º–µ
            });

            if (avtextElement) {
                avtextElement.style.color = '#1a4b8e'; // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –Ω–∏–∫–Ω–µ–π–º–∞ –≤ —Ç–µ–º–Ω–æ–π —Ç–µ–º–µ
            }

        } else {
            // –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞
            document.body.style.backgroundColor = '#000000';
            document.body.style.color = '#b9b4b4';

            images.forEach((img) => {
                if (img !== avatar && !socialIcons.includes(img)) { // –ò—Å–∫–ª—é—á–∞–µ–º –∏–∫–æ–Ω–∫–∏ —Å–æ—Ü—Å–µ—Ç–µ–π
                    img.style.opacity = '1'; // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                }
            });

            // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –¥–ª—è h1, h2 –∏ –Ω–∏–∫–Ω–µ–π–º–∞ –Ω–∞ —Å–≤–µ—Ç–ª—ã–π
            h1h2Elements.forEach((el) => {
                el.style.color = '#78b89a'; // –¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º–µ
            });

            if (avtextElement) {
                avtextElement.style.color = '#78b89a'; // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –Ω–∏–∫–Ω–µ–π–º–∞ –≤ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º–µ
            }
        }
    });
});

const video = document.getElementById('background-video');

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–∏–¥–µ–æ –±–µ–∑ –∑–≤—É–∫–∞
video.volume = 0;
let isFading = false;

// –°–æ–∑–¥–∞–µ–º Intersection Observer –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤–∏–¥–µ–æ
const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
        if (entry.isIntersecting) {
            // –ö–æ–≥–¥–∞ –≤–∏–¥–µ–æ –≤–∏–¥–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ, –ø–ª–∞–≤–Ω–æ –≤–∫–ª—é—á–∞–µ–º –∑–≤—É–∫
            fadeInVolume(video);
        } else {
            // –ö–æ–≥–¥–∞ –≤–∏–¥–µ–æ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –∑–æ–Ω—ã –≤–∏–¥–∏–º–æ—Å—Ç–∏, –ø–ª–∞–≤–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º –∑–≤—É–∫
            fadeOutVolume(video);
        }
    });
}, {
    threshold: 0.5 // –≠—Ñ—Ñ–µ–∫—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –≤–∏–¥–µ–æ –≤–∏–¥–Ω–æ –Ω–∞ 50%
});

// –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –≤–∏–¥–µ–æ
observer.observe(video);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏
function fadeInVolume(videoElement) {
    if (isFading) return;
    isFading = true;
    const fadeInInterval = setInterval(() => {
        if (videoElement.volume < 0.8) {
            videoElement.volume = Math.min(videoElement.volume + 0.05, 1);
        } else {
            clearInterval(fadeInInterval);
            isFading = false;
        }
    }, 10);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —É–º–µ–Ω—å—à–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏
function fadeOutVolume(videoElement) {
    if (isFading) return;
    isFading = true;
    const fadeOutInterval = setInterval(() => {
        if (videoElement.volume > 0.2) {
            videoElement.volume = Math.max(videoElement.volume - 0.05, 0);
        } else {
            clearInterval(fadeOutInterval);
            isFading = false;
        }
    }, 10);
}

// –í–∞—à API-–∫–ª—é—á OpenWeatherMap
const apiKey = 'bf6fe63e6eb2ba55bb0fffe350177538';
const city = 'Petropavlovsk-Kamchatsky, RU';
const weatherIcon = document.getElementById('weather-icon');

async function getWeather() {
    try {
        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric&lang=en`);
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ');
        }
        const data = await response.json();
        updateWeatherIcon(data);
    } catch (error) {
        console.error(error.message);
        weatherIcon.textContent = '‚ö†Ô∏è';
        document.getElementById('weather-error').textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ';
    }
}

function updateWeatherIcon(data) {
    const weather = data.weather[0].main.toLowerCase();
    const description = data.weather[0].description;
    let icon = '';

    if (weather.includes('snow')) {
        icon = '‚ùÑÔ∏è';
    } else if (weather.includes('rain') || weather.includes('drizzle')) {
        icon = 'üåßÔ∏è';
    } else if (weather.includes('thunderstorm')) {
        icon = '‚õàÔ∏è';
    } else if (weather.includes('cloud')) {
        icon = '‚òÅÔ∏è';
    } else if (weather.includes('clear')) {
        icon = '‚òÄÔ∏è';
    } else if (weather.includes('mist') || weather.includes('fog')) {
        icon = 'üå´Ô∏è';
    } else {
        icon = 'üåà';
    }

    weatherIcon.textContent = `${icon} ${description}`;
}

getWeather();

async function getWeather() {
    try {
        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric&lang=en`);
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ');
        }
        const data = await response.json();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if (data && data.weather && data.weather[0]) {
            updateWeatherIcon(data);
        } else {
            throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ');
        }
    } catch (error) {
        console.error(error.message);
        weatherIcon.textContent = '‚ö†Ô∏è';
        document.getElementById('weather-error').textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫–µ-–ö–∞–º—á–∞—Ç—Å–∫–æ–º
function updateKamchatkaTime() {
    const timeElement = document.getElementById("local-time");
    const options = {
        timeZone: 'Asia/Kamchatka',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        hour12: false,
    };

    const currentTime = new Intl.DateTimeFormat('ru-RU', options).format(new Date());
    timeElement.textContent = `time: ${currentTime}`;
}

// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
setInterval(updateKamchatkaTime, 1000);
updateKamchatkaTime();

document.addEventListener("DOMContentLoaded", () => {
    const swiper = new Swiper('.swiper-container', {
        slidesPerView: 1,
        spaceBetween: 10,
        pagination: {
            el: '.swiper-pagination',
            clickable: true,
        },
        loop: true,
    });
});

const getCurrentLesson = () => {
    const daysOfWeek = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞"];
    const currentDay = daysOfWeek[new Date().getDay() - 1]; // –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    const currentTime = new Date();
    const currentHour = currentTime.getHours();
    const currentMinute = currentTime.getMinutes();
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    const currentTimeString = `${String(currentHour).padStart(2, '0')}:${String(currentMinute).padStart(2, '0')}`;
  
    return { currentDay, currentTimeString };
  };
  
  const getLessonForTime = (schedule, currentDay, currentTimeString) => {
    const daySchedule = schedule[currentDay];
    
    // –î–ª—è –∫–∞–∂–¥–æ–π —Å–º–µ–Ω—ã (shift1, shift2) –∏—â–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫
    for (const shift of Object.values(daySchedule)) {
      for (const lesson of shift) {
        if (currentTimeString >= lesson.start && currentTimeString <= lesson.end) {
          return lesson.lesson;
        }
      }
    }
    return "–ù–µ—Ç —É—Ä–æ–∫–∞"; // –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
  };
  
  const displayCurrentLesson = () => {
    const { currentDay, currentTimeString } = getCurrentLesson();
    const currentLesson = getLessonForTime(schedule, currentDay, currentTimeString);
  
    const lessonElement = document.getElementById("current-lesson");
    lessonElement.textContent = `–¢–µ–∫—É—â–∏–π —É—Ä–æ–∫: ${currentLesson}`;
  };
  
  // –í—ã–∑–æ–≤–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞
  displayCurrentLesson();
  