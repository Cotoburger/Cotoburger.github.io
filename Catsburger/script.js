// –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ –∞–≤–∞—Ç–∞—Ä–∫—É, –∞ —Ç–∞–∫–∂–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ü—Å–µ—Ç–µ–π
const images = document.querySelectorAll('img');
const avatar = document.querySelector('.avatar');
const socialIcons = document.querySelectorAll('.social-icon'); // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ü—Å–µ—Ç–µ–π

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Swiper
const swiper = new Swiper('.swiper-container', {
    spaceBetween: 20,
    slidesPerView: 'auto',
    loop: true,
    autoplay: {
        delay: 3500,
        disableOnInteraction: false,
    },
    navigation: {
        nextEl: '.swiper-button-next',
        prevEl: '.swiper-button-prev',
    },
    pagination: {
        el: '.swiper-pagination',
        clickable: true,
    },
});
let scrollTimeout;
window.addEventListener('scroll', () => {
    if (scrollTimeout) {
        cancelAnimationFrame(scrollTimeout);
    }
    scrollTimeout = requestAnimationFrame(() => {
        const h1h2Elements = document.querySelectorAll('h1, h2'); // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ h1 –∏ h2
        if (scrollY > 400) {
            // –¢—ë–º–Ω–∞—è —Ç–µ–º–∞
            document.body.style.backgroundColor = '#02090e'; // –°–ê–ú–û–ï –í–ê–ñ–ù–û–ï
            document.body.style.color = '#4f99c1'; // –¶–í–ï–¢ –¢–ï–ö–°–¢–ê

            images.forEach((img) => {
                if (img !== avatar && !socialIcons.includes(img)) { // –ò—Å–∫–ª—é—á–∞–µ–º –∏–∫–æ–Ω–∫–∏ —Å–æ—Ü—Å–µ—Ç–µ–π
                    img.style.opacity = '0'; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ü—Å–µ—Ç–µ–π
                }
            });

            // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –¥–ª—è h1 –∏ h2
            h1h2Elements.forEach((el) => {
                el.style.color = '#1a4b8e'; // –¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ —Ç–µ–º–Ω–æ–π —Ç–µ–º–µ
            });

        } else {
            // –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞
            document.body.style.backgroundColor = '#000000';
            document.body.style.color = '#b9b4b4';

            images.forEach((img) => {
                if (img !== avatar && !socialIcons.includes(img)) { // –ò—Å–∫–ª—é—á–∞–µ–º –∏–∫–æ–Ω–∫–∏ —Å–æ—Ü—Å–µ—Ç–µ–π
                    img.style.opacity = '1'; // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                }
            });

            // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –¥–ª—è h1 –∏ h2 –Ω–∞ —Å–∏–Ω–∏–π
            h1h2Elements.forEach((el) => {
                el.style.color = '#78b89a'; // –¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º–µ
            });
        }
    });
});



// –í–∞—à API-–∫–ª—é—á OpenWeatherMap
const apiKey = 'bf6fe63e6eb2ba55bb0fffe350177538';
const city = 'Petropavlovsk-Kamchatsky, RU';
const weatherIcon = document.getElementById('weather-icon');

async function getWeather() {
    try {
        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric&lang=en`);
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ');
        }
        const data = await response.json();
        updateWeatherIcon(data);
    } catch (error) {
        console.error(error.message);
        weatherIcon.textContent = '‚ö†Ô∏è';
        document.getElementById('weather-error').textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ';
    }
}

function updateWeatherIcon(data) {
    const weather = data.weather[0].main.toLowerCase();
    const description = data.weather[0].description;
    let icon = '';

    if (weather.includes('snow')) {
        icon = '‚ùÑÔ∏è';
    } else if (weather.includes('rain') || weather.includes('drizzle')) {
        icon = 'üåßÔ∏è';
    } else if (weather.includes('thunderstorm')) {
        icon = '‚õàÔ∏è';
    } else if (weather.includes('cloud')) {
        icon = '‚òÅÔ∏è';
    } else if (weather.includes('clear')) {
        icon = '‚òÄÔ∏è';
    } else if (weather.includes('mist') || weather.includes('fog')) {
        icon = 'üå´Ô∏è';
    } else {
        icon = 'üåà';
    }

    weatherIcon.textContent = `${icon} ${description}`;
}

getWeather();

async function getWeather() {
    try {
        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric&lang=en`);
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ');
        }
        const data = await response.json();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if (data && data.weather && data.weather[0]) {
            updateWeatherIcon(data);
        } else {
            throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ');
        }
    } catch (error) {
        console.error(error.message);
        weatherIcon.textContent = '‚ö†Ô∏è';
        document.getElementById('weather-error').textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫–µ-–ö–∞–º—á–∞—Ç—Å–∫–æ–º
function updateKamchatkaTime() {
    const timeElement = document.getElementById("local-time");
    const options = {
        timeZone: 'Asia/Kamchatka',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        hour12: false,
    };

    const currentTime = new Intl.DateTimeFormat('ru-RU', options).format(new Date());
    timeElement.textContent = `time: ${currentTime}`;
}

// –í–∞—à API-–∫–ª—é—á Steam (–ø–æ–ª—É—á–∏—Ç–µ –µ–≥–æ –Ω–∞ —Å–∞–π—Ç–µ Steam)
const steamApiKey = '3B52416F553AFD49DCCB3C9FBC4C3E2E';
const appId = 387990; // ID –∏–≥—Ä—ã Scrap Mechanic

async function fetchLatestSteamUpdate() {
    const url = `https://api.steampowered.com/ISteamNews/GetNewsForApp/v2/?appid=${appId}&count=1&maxlength=300&format=json&key=${steamApiKey}`;

    try {
        const response = await fetch(url);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Steam API');
        const data = await response.json();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π
        if (data && data.appnews && data.appnews.newsitems && data.appnews.newsitems.length > 0) {
            const latestUpdate = data.appnews.newsitems[0];
            const date = new Date(latestUpdate.date * 1000).toLocaleDateString(); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É
            const title = latestUpdate.title;
            const content = latestUpdate.contents;

            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            const updatesList = document.getElementById('updates-list');
            updatesList.innerHTML = `<li><strong>${date}</strong>: <em>${title}</em> - ${content}</li>`;
        } else {
            document.getElementById('updates-list').textContent = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏.';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        document.getElementById('updates-list').textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.';
    }
}

// –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
fetchLatestSteamUpdate();