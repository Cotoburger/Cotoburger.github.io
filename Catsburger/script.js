// –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ –∞–≤–∞—Ç–∞—Ä–∫—É
const images = document.querySelectorAll('img');
const avatar = document.querySelector('.avatar');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Swiper
const swiper = new Swiper('.swiper-container', {
    spaceBetween: 20,
    slidesPerView: 'auto',
    loop: true,
    autoplay: {
        delay: 3500,
        disableOnInteraction: false,
    },
    navigation: {
        nextEl: '.swiper-button-next',
        prevEl: '.swiper-button-prev',
    },
    pagination: {
        el: '.swiper-pagination',
        clickable: true,
    },
});

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
let scrollTimeout;
window.addEventListener('scroll', () => {
    if (scrollTimeout) {
        cancelAnimationFrame(scrollTimeout);
    }
    scrollTimeout = requestAnimationFrame(() => {
        const h1h2Elements = document.querySelectorAll('h1, h2'); // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ h1 –∏ h2
        if (scrollY > 350) {
            // –¢—ë–º–Ω–∞—è —Ç–µ–º–∞
            document.body.style.backgroundColor = '#90a4bf';
            document.body.style.color = '#000000';

            images.forEach((img) => {
                if (img !== avatar) {
                    img.style.opacity = '0'; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
                }
            });

            // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –¥–ª—è h1 –∏ h2
            h1h2Elements.forEach((el) => {
                el.style.color = '#1a4b8e'; // –¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ —Ç–µ–º–Ω–æ–π —Ç–µ–º–µ
            });

        } else {
            // –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞
            document.body.style.backgroundColor = '#000000';
            document.body.style.color = '#b9b4b4';

            images.forEach((img) => {
                if (img !== avatar) {
                    img.style.opacity = '1'; // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                }
            });

            // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –¥–ª—è h1 –∏ h2 –Ω–∞ —Å–∏–Ω–∏–π
            h1h2Elements.forEach((el) => {
                el.style.color = '#78b89a'; // –¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º–µ
            });
        }
    });
});


// –í–∞—à API-–∫–ª—é—á OpenWeatherMap
const apiKey = 'bf6fe63e6eb2ba55bb0fffe350177538';
const city = 'Petropavlovsk-Kamchatsky, RU';
const weatherIcon = document.getElementById('weather-icon');

async function getWeather() {
    try {
        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric&lang=en`);
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ');
        }
        const data = await response.json();
        updateWeatherIcon(data);
    } catch (error) {
        console.error(error.message);
        weatherIcon.textContent = '‚ö†Ô∏è';
        document.getElementById('weather-error').textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ';
    }
}

function updateWeatherIcon(data) {
    const weather = data.weather[0].main.toLowerCase();
    const description = data.weather[0].description;
    let icon = '';

    if (weather.includes('snow')) {
        icon = '‚ùÑÔ∏è';
    } else if (weather.includes('rain') || weather.includes('drizzle')) {
        icon = 'üåßÔ∏è';
    } else if (weather.includes('thunderstorm')) {
        icon = '‚õàÔ∏è';
    } else if (weather.includes('cloud')) {
        icon = '‚òÅÔ∏è';
    } else if (weather.includes('clear')) {
        icon = '‚òÄÔ∏è';
    } else if (weather.includes('mist') || weather.includes('fog')) {
        icon = 'üå´Ô∏è';
    } else {
        icon = 'üåà';
    }

    weatherIcon.textContent = `${icon} ${description}`;
}

getWeather();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫–µ-–ö–∞–º—á–∞—Ç—Å–∫–æ–º
function updateKamchatkaTime() {
    const timeElement = document.getElementById("local-time");
    const options = {
        timeZone: 'Asia/Kamchatka',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        hour12: false,
    };

    const currentTime = new Intl.DateTimeFormat('ru-RU', options).format(new Date());
    timeElement.textContent = `time: ${currentTime}`;
}

// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
setInterval(updateKamchatkaTime, 1000);
updateKamchatkaTime();
